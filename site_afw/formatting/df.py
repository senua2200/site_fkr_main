# -*- coding: utf-8 -*-
"""TOU 2 lab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qtlTgtHcvecIEzDASFbcZwsecuCYeQYN
"""

import numpy as np
import matplotlib.pyplot as plt
import math

degree2radian = lambda degree: (degree*np.pi)/180
calc_dvdt = lambda k,x1: -((2*k*abs(x1))**0.5)*np.sign(x1)
CalcC = lambda mu: v0 - mu*(dv0dt**2)/2/k

J=2000
M=45
v0=degree2radian(280)
dv0dt=degree2radian(-30)
k=M/J
dv=0.001
t1_practice = 0
t2_practice = 0
selected_mu = dv0dt < calc_dvdt(k, v0)
selected_mu_value = 1 if selected_mu else -1

def drawSwitchLine(range=20):
  switch_line_x = []
  switch_line_y = []
  v_current=-range
  v_end=range
  while(v_current<=v_end):
    switch_line_x.append(v_current)
    switch_line_y.append(calc_dvdt(k,v_current))
    v_current+=dv
  return switch_line_x, switch_line_y

switch_line_x, switch_line_y = drawSwitchLine()

dv1dt = selected_mu_value*(abs(CalcC(selected_mu_value)*k))**0.5
v1 = -selected_mu_value*dv1dt**2/2/k

def drawSwitchParabola():
  parabola_line_dv = []
  parabola_line_v = []
  dv_current = -max(abs(dv1dt),abs(dv0dt))
  dv_end = -1*dv_current
  #dv_end= selected_mu_value*(CalcC(selected_mu_value)*k)**0.5
  print(dv_current,dv_end)
  while(dv_current<=dv_end):
    parabola_line_dv.append(dv_current)
    parabola_line_v.append(selected_mu_value*dv_current**2/2/k+CalcC(selected_mu_value))
    dv_current+=dv
  return parabola_line_dv, parabola_line_v

parabola_line_x2, parabola_line_x1 = drawSwitchParabola()

plt.figure(figsize=(8,8))
plt.scatter(v0, dv0dt, marker='x', s=40, color='red', label='Начальная точка')
plt.plot(switch_line_x, switch_line_y, 'blue', label='Линия переключения')
plt.title('Фазовая плоскость')
plt.xlabel('v')
plt.ylabel('dvdt')
ax = plt.gca()
# plot X - axis
ax.axhline(y=0, color='k')
# plot Y - axis
ax.axvline(x=0, color='k')
plt.legend(loc='best')
plt.show()

plt.figure(figsize=(8,8))
plt.scatter(v0, dv0dt, marker='x', s=40, color='red', label='Начальная точка')
plt.plot(switch_line_x, switch_line_y, 'blue', label='Линия переключения')
plt.plot(parabola_line_x1, parabola_line_x2, 'green', label='Парабола движения спутника')
plt.scatter(v1, dv1dt, marker='o', s=40, color='black', label='Точка переключения')
plt.title('Фазовая плоскость')
plt.xlabel('v')
plt.ylabel('dvdt')
ax = plt.gca()
# plot X - axis
ax.axhline(y=0, color='k')
# plot Y - axis
ax.axvline(x=0, color='k')
plt.legend(loc='best')
plt.show()

def regulator(dvdt,v):
  dvdt_switch = calc_dvdt(k, v)
  if dvdt < dvdt_switch  or (dvdt == dvdt_switch  and dvdt < 0):
    return 1
  return -1

def calcSputnik(mu, v, dvdt, dt):
  k1 = dvdt * dt
  m1 = mu * k * dt
  k2 = (dvdt + m1 / 2) * dt
  m2 = mu * k * dt
  k3 = (dvdt + m2 / 2) * dt
  m3 = mu * k * dt
  k4 = (dvdt + m3) * dt
  m4 = mu * k * dt

  new_v = v + (k1 + 2 * k2 + 2 * k3 + k4) / 6
  new_dvdt = dvdt + (m1 + 2 * m2 + 2 * m3 + m4) / 6

  return new_v, new_dvdt

def modelling():
  t1_modelling=0
  t2_modelling=0
  t_arr = []
  v_arr = []
  dvdt_arr = []
  mu_arr = []
  L = 200
  dt = 0.0001
  t = 0.0001
  v = v0
  dvdt = dv0dt
  mu = 1 if selected_mu else -1



  while t < L:
    t_arr.append(t)
    v_arr.append(v)
    dvdt_arr.append(dvdt)
    mu_arr.append(mu)

    mu = regulator(dvdt, v)

    v, dvdt = calcSputnik(mu, v, dvdt, dt)

    if abs(v) <= 1e-4 and abs(dvdt) <= 1e-4:
      break

    if mu == selected_mu_value: t1_modelling += dt
    else: t2_modelling += dt

    t += dt
  return t_arr,v_arr,dvdt_arr,mu_arr,t1_modelling,t2_modelling

t_arr,v_arr,dvdt_arr,mu_arr,t1_modelling,t2_modelling = modelling()

print(f"t1-t0: {t1_modelling}, t2-t1: {t2_modelling}, общее время: {t1_modelling+t2_modelling}")

plt.figure(figsize=(8,8))
plt.plot(t_arr, v_arr, 'blue', label='v')
plt.plot(t_arr, mu_arr, 'green', label='mu')
plt.title('Изменение v со временем')
plt.xlabel('t')
plt.ylabel('v')
ax = plt.gca()
# plot X - axis
ax.axhline(y=0, color='k')
# plot Y - axis
ax.axvline(x=0, color='k')
plt.legend(loc='best')
plt.show()

plt.figure(figsize=(8,8))
plt.plot(t_arr, dvdt_arr, 'blue', label='dvdt')
plt.plot(t_arr, mu_arr, 'green', label='mu')
plt.title('Изменение dvdt со временем')
plt.xlabel('t')
plt.ylabel('dvdt')
ax = plt.gca()
# plot X - axis
ax.axhline(y=0, color='k')
# plot Y - axis
ax.axvline(x=0, color='k')
plt.legend(loc='best')
plt.show()

plt.figure(figsize=(8,8))
plt.plot(v_arr, dvdt_arr, 'blue', label='Траектория движения фазовой точки')
plt.title('Фазовая плоскость')
plt.xlabel('v')
plt.ylabel('dvdt')
ax = plt.gca()
# plot X - axis
ax.axhline(y=0, color='k')
# plot Y - axis
ax.axvline(x=0, color='k')
plt.legend(loc='best')
plt.show()
